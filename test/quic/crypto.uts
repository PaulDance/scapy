% Tests for QUIC cryptography
~ crypto
+ Test initial keys
=
from binascii import unhexlify
from scapy.layers.quic import QUIC_VERSION
from scapy.layers.quic.crypto import (
    LABEL_CLIENT, LABEL_SERVER, LABEL_AEAD_KEY,
    LABEL_IV, LABEL_HP, get_initial_salt, QuicHkdf
)
from test.quic import DCID
hkdf = QuicHkdf()

= Test initial salt
assert get_initial_salt(QUIC_VERSION) \
    == unhexlify("afbfec289993d24c9e9786f19c6111e04390a899")

= Test initial secret
initial_secret = hkdf.get_initial_secret(QUIC_VERSION, DCID)
assert initial_secret == unhexlify("1e7e7764529715b1e0ddc8e9753c6157"
                                   "6769605187793ed366f8bbf8c9e986eb")

= Test client initial secret
client_initial_secret = hkdf.get_client_initial_secret(initial_secret)
assert client_initial_secret == unhexlify("0088119288f1d866733ceeed15ff9d50"
                                          "902cf82952eee27e9d4d4918ea371d87")

= Test client key
client_key = hkdf.compute_key(client_initial_secret)
assert client_key == unhexlify("175257a31eb09dea9366d8bb79ad80ba")

= Test client IV
client_iv = hkdf.compute_iv(client_initial_secret)
assert client_iv == unhexlify("6b26114b9cba2b63a9e8dd4f")

= Test client HP
client_hp = hkdf.compute_hp(client_initial_secret)
assert client_hp == unhexlify("9ddd12c994c0698b89374a9c077a3077")

= Test server initial secret
server_initial_secret = hkdf.get_server_initial_secret(initial_secret)
assert server_initial_secret == unhexlify("006f881359244dd9ad1acf85f595bad6"
                                          "7c13f9f5586f5e64e1acae1d9ea8f616")

= Test server key
server_key = hkdf.compute_key(server_initial_secret)
assert server_key == unhexlify("149d0b1662ab871fbe63c49b5e655a5d")

= Test server IV
server_iv = hkdf.compute_iv(server_initial_secret)
assert server_iv == unhexlify("bab2b12a4c76016ace47856d")

= Test server HP
server_hp = hkdf.compute_hp(server_initial_secret)
assert server_hp == unhexlify("c0c499a65a60024a18a250974ea01dfa")


+ Test client initial encryption
=
from scapy.layers.quic.packets import QuicInitial
from scapy.layers.quic.crypto import (
    QuicAead, header_protection_sample, header_protection_mask,
    header_protection, encrypt_initial, decrypt_initial
)
from scapy.layers.tls.crypto.cipher_aead import Cipher_AES_128_GCM_TLS13
from test.quic import CLIENT_INITIAL_BYTES, SERVER_INITIAL_BYTES

= Parse client initial packet
client_initial = QuicInitial(CLIENT_INITIAL_BYTES)

= Test client initial sample
client_enc_pl = QuicAead(client_key, client_iv, Cipher_AES_128_GCM_TLS13).encrypt(client_initial)
client_hp_sample = header_protection_sample(client_initial, client_enc_pl)
assert client_hp_sample == unhexlify("fb66bc6a93032b50dd8973972d149421")

= Test client initial mask
client_hp_mask = header_protection_mask(client_hp, client_hp_sample)
assert client_hp_mask == unhexlify("1e9cdb9909")

= Test client initial header protection
assert header_protection(client_initial, client_hp_mask) \
    == unhexlify("cdff000020088394c8f03e5157080000449e9cdb990b")

= Test client initial encryption result
client_initial_encrypted_bytes = unhexlify(
    "cdff000020088394c8f03e5157080000449e9cdb990bfb66bc6a93032b50dd89"
    "73972d149421874d3849e3708d71354ea33bcdc356f3ea6e2a1a1bd7c3d14003"
    "8d3e784d04c30a2cdb40c32523aba2dafe1c1bf3d27a6be38fe38ae033fbb071"
    "3c1c73661bb6639795b42b97f77068ead51f11fbf9489af2501d09481e6c64d4"
    "b8551cd3cea70d830ce2aeeec789ef551a7fbe36b3f7e1549a9f8d8e153b3fac"
    "3fb7b7812c9ed7c20b4be190ebd8995626e7f0fc887925ec6f0606c5d36aa81b"
    "ebb7aacdc4a31bb5f23d55faef5c51905783384f375a43235b5c742c78ab1bae"
    "0a188b75efbde6b3774ed61282f9670a9dea19e1566103ce675ab4e21081fb58"
    "60340a1e88e4f10e39eae25cd685b10929636d4f02e7fad2a5a458249f5c0298"
    "a6d53acbe41a7fc83fa7cc01973f7a74d1237a51974e097636b6203997f921d0"
    "7bc1940a6f2d0de9f5a11432946159ed6cc21df65c4ddd1115f86427259a196c"
    "7148b25b6478b0dc7766e1c4d1b1f5159f90eabc61636226244642ee148b464c"
    "9e619ee50a5e3ddc836227cad938987c4ea3c1fa7c75bbf88d89e9ada642b2b8"
    "8fe8107b7ea375b1b64889a4e9e5c38a1c896ce275a5658d250e2d76e1ed3a34"
    "ce7e3a3f383d0c996d0bed106c2899ca6fc263ef0455e74bb6ac1640ea7bfedc"
    "59f03fee0e1725ea150ff4d69a7660c5542119c71de270ae7c3ecfd1af2c4ce5"
    "51986949cc34a66b3e216bfe18b347e6c05fd050f85912db303a8f054ec23e38"
    "f44d1c725ab641ae929fecc8e3cefa5619df4231f5b4c009fa0c0bbc60bc75f7"
    "6d06ef154fc8577077d9d6a1d2bd9bf081dc783ece60111bea7da9e5a9748069"
    "d078b2bef48de04cabe3755b197d52b32046949ecaa310274b4aac0d008b1948"
    "c1082cdfe2083e386d4fd84c0ed0666d3ee26c4515c4fee73433ac703b690a9f"
    "7bf278a77486ace44c489a0c7ac8dfe4d1a58fb3a730b993ff0f0d61b4d89557"
    "831eb4c752ffd39c10f6b9f46d8db278da624fd800e4af85548a294c1518893a"
    "8778c4f6d6d73c93df200960104e062b388ea97dcf4016bced7f62b4f062cb6c"
    "04c20693d9a0e3b74ba8fe74cc01237884f40d765ae56a51688d985cf0ceaef4"
    "3045ed8c3f0c33bced08537f6882613acd3b08d665fce9dd8aa73171e2d3771a"
    "61dba2790e491d413d93d987e2745af29418e428be34941485c93447520ffe23"
    "1da2304d6a0fd5d07d0837220236966159bef3cf904d722324dd852513df39ae"
    "030d8173908da6364786d3c1bfcb19ea77a63b25f1e7fc661def480c5d00d444"
    "56269ebd84efd8e3a8b2c257eec76060682848cbf5194bc99e49ee75e4d0d254"
    "bad4bfd74970c30e44b65511d4ad0e6ec7398e08e01307eeeea14e46ccd87cf3"
    "6b285221254d8fc6a6765c524ded0085dca5bd688ddf722e2c0faf9d0fb2ce7a"
    "0c3f2cee19ca0ffba461ca8dc5d2c8178b0762cf67135558494d2a96f1a139f0"
    "edb42d2af89a9c9122b07acbc29e5e722df8615c343702491098478a389c9872"
    "a10b0c9875125e257c7bfdf27eef4060bd3d00f4c14fd3e3496c38d3c5d1a566"
    "8c39350effbc2d16ca17be4ce29f02ed969504dda2a8c6b9ff919e693ee79e09"
    "089316e7d1d89ec099db3b2b268725d888536a4b8bf9aee8fb43e82a4d919d48"
    "b5a464ca5b62df3be35ee0d0a2ec68f3"
)
assert encrypt_initial(client_initial, DCID, client=True) == client_initial_encrypted_bytes


+ Test client initial decryption
= Parse encrypted client initial packet
client_initial_encrypted = QuicInitial(client_initial_encrypted_bytes)

= Test encrypted client initial sample
assert header_protection_sample(client_initial_encrypted,
                                client_initial_encrypted.payload.build()) == client_hp_sample

= Test encrypted client initial mask
assert header_protection_mask(client_hp, client_hp_sample) == client_hp_mask

= Test client initial decryption result
assert decrypt_initial(client_initial_encrypted,
                       DCID, client=True).build().rstrip(b"\x00") == client_initial.build()


+ Test server initial encryption
= Parse server initial packet
server_initial = QuicInitial(SERVER_INITIAL_BYTES)

= Test server initial sample
server_enc_pl = QuicAead(server_key, server_iv, Cipher_AES_128_GCM_TLS13).encrypt(server_initial)
server_hp_sample = header_protection_sample(server_initial, server_enc_pl)
assert server_hp_sample == unhexlify("823a5d24534d906ce4c76782a2167e34")

= Test server initial mask
server_hp_mask = header_protection_mask(server_hp, server_hp_sample)
assert server_hp_mask == unhexlify("56fb1381e7")

= Test server initial header protection
assert header_protection(server_initial, server_hp_mask) \
    == unhexlify("c7ff0000200008f067a5502a4262b5004075fb12")

= Test server initial encryption result
server_initial_encrypted_bytes = unhexlify(
    "c7ff0000200008f067a5502a4262b5004075fb12ff07823a5d24534d906ce4c7"
    "6782a2167e3479c0f7f6395dc2c91676302fe6d70bb7cbeb117b4ddb7d173498"
    "44fd61dae200b8338e1b932976b61d91e64a02e9e0ee72e3a6f63aba4ceeeec5"
    "be2f24f2d86027572943533846caa13e6f163fb257473d0eda5047360fd4a47e"
    "fd8142fafc0f76"
)
assert encrypt_initial(server_initial, DCID, client=False) == server_initial_encrypted_bytes


+ Test server initial decryption
= Parse encrypted server initial packet
server_initial_encrypted = QuicInitial(server_initial_encrypted_bytes)

= Test encrypted server initial sample
assert header_protection_sample(server_initial_encrypted,
                                server_initial_encrypted.payload.build()) == server_hp_sample

= Test encrypted server initial mask
assert header_protection_mask(server_hp, server_hp_sample) == server_hp_mask

= Test server initial decryption result
server_initial
assert decrypt_initial(server_initial_encrypted, DCID, client=False).build() == server_initial.build()
