% Tests for QUIC frames
~ parsing
+ Check client initial frames
=
from binascii import unhexlify
from scapy.layers.quic.packets import QuicInitial
from scapy.layers.quic.packets.frames import PaddingFrame, PingFrame,AckFrame,ResetStreamFrame,StopSendingFrame,CryptoFrame,NewTokenFrame,StreamFrame,MaxDataFrame,MaxStreamsFrame, DataBlockedFrame, StreamDataBlockedFrame, StreamsBlockedFrame, NewConnectionIdFrame,RetireConnectionIdFrame, PathChallengeFrame, PathResponseFrame, ConnectionCloseFrame, HandshakeDoneFrame, FrameStorage
from test.quic import CLIENT_INITIAL_BYTES, SERVER_INITIAL_BYTES

= Parse client initial
client_initial = QuicInitial(CLIENT_INITIAL_BYTES)

= Get client initial frames
client_initial_frames = client_initial.get_frames()

= Test client initial frames
assert len(client_initial_frames) == 1

= Test client initial crypto frame
client_initial_crypto_frame = client_initial_frames[0]
assert type(client_initial_crypto_frame) == CryptoFrame
assert client_initial_crypto_frame.frame_type == 0x6
assert client_initial_crypto_frame.offset == 0
assert client_initial_crypto_frame.length == 241
assert client_initial_crypto_frame.crypto_data == unhexlify(
    "010000ed0303ebf8fa56f12939b9584a3896472ec40bb863cfd3e86804fe3a47"
    "f06a2b69484c00000413011302010000c000000010000e00000b6578616d706c"
    "652e636f6dff01000100000a00080006001d0017001800100007000504616c70"
    "6e000500050100000000003300260024001d00209370b2c9caa47fbabaf4559f"
    "edba753de171fa71f50f1ce15d43e994ec74d748002b0003020304000d001000"
    "0e0403050306030203080408050806002d00020101001c000240010039003204"
    "08ffffffffffffffff05048000ffff07048000ffff0801100104800075300901"
    "100f088394c8f03e51570806048000ffff"
)


+ Check server initial frames
= Parse server initial
server_initial = QuicInitial(SERVER_INITIAL_BYTES)

= Get server initial frames
server_initial_frames = server_initial.get_frames()

= Test server initial frames
assert len(server_initial_frames) == 2

= Test server initial ack frame
server_initial_ack_frame = server_initial_frames[0]
assert type(server_initial_ack_frame) == AckFrame
assert server_initial_ack_frame.frame_type == 0x2
assert server_initial_ack_frame.largest_acknowledged == 0
assert server_initial_ack_frame.ack_delay == 0
assert server_initial_ack_frame.ack_range_count == 0
assert server_initial_ack_frame.first_ack_range == 0
assert server_initial_ack_frame.ack_ranges is None
assert server_initial_ack_frame.ect0_count is None
assert server_initial_ack_frame.ect1_count is None
assert server_initial_ack_frame.ecn_ce_count is None

= Test server initial crypto frame
server_initial_crypto_frame = server_initial_frames[1]
assert type(server_initial_crypto_frame) == CryptoFrame
assert server_initial_crypto_frame.frame_type == 0x6
assert server_initial_crypto_frame.offset == 0
assert server_initial_crypto_frame.length == 90
assert server_initial_crypto_frame.crypto_data == unhexlify(
    "020000560303eefce7f7b37ba1d1632e96677825ddf73988cfc79825df566dc5"
    "430b9a045a1200130100002e00330024001d00209d3c940d89690b84d08a6099"
    "3c144eca684d1081287c834d5311bcf32bb9da1a002b00020304"
)


+ Check ResetStreamFrame
= Parse series of bytes for ResetStreamFrame
from scapy.layers.quic.packets.frames import ResetStreamFrame
frame_bytes = unhexlify("04010203")
storage = FrameStorage(frame_bytes)

= Check only one frame
frames = storage.get_frames()
assert len(frames) == 1

= Check that one reset stream frame
reset_stream_frame = frames[0]
assert type(reset_stream_frame) == ResetStreamFrame
assert reset_stream_frame.frame_type == 4
assert reset_stream_frame.stream_id == 1
assert reset_stream_frame.application_protocol_error_code == 2
assert reset_stream_frame.final_size == 3


= Check build equal to start bytes
assert reset_stream_frame.build() == frame_bytes


+ Check StopSendingFrame
= Parse series of bytes for StopSendingFrame
from scapy.layers.quic.packets.frames import StopSendingFrame
frame_bytes = unhexlify("050000")
storage = FrameStorage(frame_bytes)

= Check only one frame
frames = storage.get_frames()
assert len(frames) == 1

= Check that one stop sending stream frame
stop_sending_frame_frame = frames[0]
assert type(stop_sending_frame_frame) == StopSendingFrame
assert stop_sending_frame_frame.frame_type == 5
assert stop_sending_frame_frame.stream_id == 0
assert stop_sending_frame_frame.application_protocol_error_code == 0

= Check build equal to start bytes
assert stop_sending_frame_frame.build() == frame_bytes


+ Check NewTokenFrame
= Parse series of bytes for NewTokenFrame
from scapy.layers.quic.packets.frames import NewTokenFrame
frame_bytes = unhexlify("070102")
storage = FrameStorage(frame_bytes)

= Check only one frame
frames = storage.get_frames()
assert len(frames) == 1

= Check that one new token stream frame
new_token_frame = frames[0]
assert type(new_token_frame) == NewTokenFrame
assert new_token_frame.frame_type == 7
assert new_token_frame.token_length == 1
print(new_token_frame.token)
assert new_token_frame.token == bytes([2])

= Check build equal to start bytes
assert new_token_frame.build() == frame_bytes

+ Check MaxDataFrame
= Parse series of bytes for MaxDataFrame
from scapy.layers.quic.packets.frames import MaxDataFrame
frame_bytes = unhexlify("1002")
storage = FrameStorage(frame_bytes)

= Check only one frame
frames = storage.get_frames()
assert len(frames) == 1

= Check that one max data frame
max_data_frame = frames[0]
assert type(max_data_frame) == MaxDataFrame
assert max_data_frame.frame_type == 0x10
assert max_data_frame.maximum_data == 2

= Check build equal to start bytes
assert max_data_frame.build() == frame_bytes

