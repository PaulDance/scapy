% Tests for QUIC frames
~ parsing
+ Check client initial frames
=
from binascii import unhexlify
from scapy.layers.quic.packets import QuicInitial
from scapy.layers.quic.packets.frames import CryptoFrame, AckFrame
from scapy.packet import NoPayload
from test.quic import CLIENT_INITIAL_BYTES, SERVER_INITIAL_BYTES

= Parse client initial
client_initial = QuicInitial(CLIENT_INITIAL_BYTES)

= Get client initial frames
client_initial_frames = client_initial.get_frames()

= Test client initial frames
assert len(client_initial_frames) == 1

= Test client initial crypto frame
client_initial_crypto_frame = client_initial_frames[0]
assert type(client_initial_crypto_frame) == CryptoFrame
assert client_initial_crypto_frame.frame_type == 0x06
assert client_initial_crypto_frame.offset == 0
assert client_initial_crypto_frame.length == 241
assert client_initial_crypto_frame.crypto_data == unhexlify(
    "010000ed0303ebf8fa56f12939b9584a3896472ec40bb863cfd3e86804fe3a47"
    "f06a2b69484c00000413011302010000c000000010000e00000b6578616d706c"
    "652e636f6dff01000100000a00080006001d0017001800100007000504616c70"
    "6e000500050100000000003300260024001d00209370b2c9caa47fbabaf4559f"
    "edba753de171fa71f50f1ce15d43e994ec74d748002b0003020304000d001000"
    "0e0403050306030203080408050806002d00020101001c000240010039003204"
    "08ffffffffffffffff05048000ffff07048000ffff0801100104800075300901"
    "100f088394c8f03e51570806048000ffff"
)
assert client_initial_crypto_frame.payload == NoPayload()


+ Check server initial frames
= Parse server initial
server_initial = QuicInitial(SERVER_INITIAL_BYTES)

= Get server initial frames
server_initial_frames = server_initial.get_frames()

= Test server initial frames
assert len(server_initial_frames) == 2

= Test server initial ack frame
server_initial_ack_frame = server_initial_frames[0]
assert type(server_initial_ack_frame) == AckFrame
assert server_initial_ack_frame.frame_type == 0x02
assert server_initial_ack_frame.largest_acknowledged == 0
assert server_initial_ack_frame.ack_delay == 0
assert server_initial_ack_frame.ack_range_count == 0
assert server_initial_ack_frame.first_ack_range == 0
assert server_initial_ack_frame.ack_ranges is None
assert server_initial_ack_frame.ect0_count is None
assert server_initial_ack_frame.ect1_count is None
assert server_initial_ack_frame.ecn_ce_count is None
assert server_initial_ack_frame.payload == NoPayload()

= Test server initial crypto frame
server_initial_crypto_frame = server_initial_frames[1]
assert type(server_initial_crypto_frame) == CryptoFrame
assert server_initial_crypto_frame.frame_type == 0x06
assert server_initial_crypto_frame.offset == 0
assert server_initial_crypto_frame.length == 90
assert server_initial_crypto_frame.crypto_data == unhexlify(
    "020000560303eefce7f7b37ba1d1632e96677825ddf73988cfc79825df566dc5"
    "430b9a045a1200130100002e00330024001d00209d3c940d89690b84d08a6099"
    "3c144eca684d1081287c834d5311bcf32bb9da1a002b00020304"
)
assert server_initial_crypto_frame.payload == NoPayload()


+ Padding frame, case 1: single byte
= Parse one zero byte
from scapy.layers.quic.packets.frames import FrameStorage, PaddingFrame
storage = FrameStorage(unhexlify("00"))

= Check only one frame
padding_frames = storage.get_frames()
assert len(padding_frames) == 1

= Check that one padding frame
padding_frame = padding_frames[0]
assert type(padding_frame) == PaddingFrame
assert padding_frame.frame_type == 0x00
assert padding_frame.payload == NoPayload()


+ Padding frame, case 2: many bytes
= Parse many zero bytes
size = 100
storage = FrameStorage(b"\x00" * size)

= Check correct amount of frames
padding_frames = storage.get_frames()
assert len(padding_frames) == size

= Check these padding frames
for padding_frame in padding_frames:
    assert type(padding_frame) == PaddingFrame
    assert padding_frame.frame_type == 0x00
    assert padding_frame.payload == NoPayload()


+ Ping frame, case 1: single byte
= Parse one one byte
from scapy.layers.quic.packets.frames import PingFrame
storage = FrameStorage(unhexlify("01"))

= Check only one frame
ping_frames = storage.get_frames()
assert len(ping_frames) == 1

= Check that one ping frame
ping_frame = ping_frames[0]
assert type(ping_frame) == PingFrame
assert ping_frame.frame_type == 0x01
assert ping_frame.payload == NoPayload()


+ Ack frame, case 1: type 0x02, just zero bytes
= Parse the bytes
from scapy.layers.quic.packets.frames import AckFrame
frame_bytes = unhexlify("0200000000")
storage = FrameStorage(frame_bytes)

= Check only one frame
frames = storage.get_frames()
assert len(frames) == 1

= Check that one ack frame
ack_frame = frames[0]
assert type(ack_frame) == AckFrame
assert ack_frame.frame_type == 0x02
assert ack_frame.largest_acknowledged == 0
assert ack_frame.ack_delay == 0
assert ack_frame.ack_range_count == 0
assert ack_frame.first_ack_range == 0
assert ack_frame.ack_ranges is None
assert ack_frame.ect0_count is None
assert ack_frame.ect1_count is None
assert ack_frame.ecn_ce_count is None
assert ack_frame.payload == NoPayload()

= Check build equal to start bytes
assert ack_frame.build() == frame_bytes


+ Ack frame, case 2: type 0x02, various bytes
= Parse the bytes
frame_bytes = unhexlify(
    "02"
    + "423f"
    + "8c456789"
    + "cf23456789abcdef"
    + "0f"
    + "00" * 0xf
)
storage = FrameStorage(frame_bytes)

= Check only one frame
frames = storage.get_frames()
assert len(frames) == 1

= Check that one ack frame
ack_frame = frames[0]
assert type(ack_frame) == AckFrame
assert ack_frame.frame_type == 0x02
assert ack_frame.largest_acknowledged == 0x023f
assert ack_frame.ack_delay == 0x0c456789
assert ack_frame.ack_range_count == 0x0f23456789abcdef
assert ack_frame.first_ack_range == 0x0f
assert ack_frame.ack_ranges == b"\x00" * 0xf
assert ack_frame.ect0_count is None
assert ack_frame.ect1_count is None
assert ack_frame.ecn_ce_count is None
assert ack_frame.payload == NoPayload()

= Check build equal to start bytes
assert ack_frame.build() == frame_bytes


+ Ack frame, case 3: type 0x03, just zero bytes
= Parse the bytes
frame_bytes = unhexlify("0300000000000000")
storage = FrameStorage(frame_bytes)

= Check only one frame
frames = storage.get_frames()
assert len(frames) == 1

= Check that one ack frame
ack_frame = frames[0]
assert type(ack_frame) == AckFrame
assert ack_frame.frame_type == 0x03
assert ack_frame.largest_acknowledged == 0
assert ack_frame.ack_delay == 0
assert ack_frame.ack_range_count == 0
assert ack_frame.first_ack_range == 0
assert ack_frame.ack_ranges is None
assert ack_frame.ect0_count == 0
assert ack_frame.ect1_count == 0
assert ack_frame.ecn_ce_count == 0
assert ack_frame.payload == NoPayload()

= Check build equal to start bytes
assert ack_frame.build() == frame_bytes


+ Ack frame, case 4: type 0x03, various bytes
= Parse the bytes
frame_bytes = unhexlify(
    "03"
    + "423f"
    + "8c456789"
    + "cf23456789abcdef"
    + "0f"
    + "00" * 0xf
    + "0f"
    + "4678"
    + "8f123456"
)
storage = FrameStorage(frame_bytes)

= Check only one frame
frames = storage.get_frames()
assert len(frames) == 1

= Check that one ack frame
ack_frame = frames[0]
assert type(ack_frame) == AckFrame
assert ack_frame.frame_type == 0x03
assert ack_frame.largest_acknowledged == 0x023f
assert ack_frame.ack_delay == 0x0c456789
assert ack_frame.ack_range_count == 0x0f23456789abcdef
assert ack_frame.first_ack_range == 0x0f
assert ack_frame.ack_ranges == b"\x00" * 0xf
assert ack_frame.ect0_count == 0x0f
assert ack_frame.ect1_count == 0x0678
assert ack_frame.ecn_ce_count == 0x0f123456
assert ack_frame.payload == NoPayload()

= Check build equal to start bytes
assert ack_frame.build() == frame_bytes


+ Check ResetStreamFrame
= Parse series of bytes for ResetStreamFrame
from scapy.layers.quic.packets.frames import ResetStreamFrame
frame_bytes = unhexlify("04010203")
storage = FrameStorage(frame_bytes)

= Check only one frame
frames = storage.get_frames()
assert len(frames) == 1

= Check that one reset stream frame
reset_stream_frame = frames[0]
assert type(reset_stream_frame) == ResetStreamFrame
assert reset_stream_frame.frame_type == 4
assert reset_stream_frame.stream_id == 1
assert reset_stream_frame.application_protocol_error_code == 2
assert reset_stream_frame.final_size == 3

= Check build equal to start bytes
assert reset_stream_frame.build() == frame_bytes


+ Check StopSendingFrame
= Parse series of bytes for StopSendingFrame
from scapy.layers.quic.packets.frames import StopSendingFrame
frame_bytes = unhexlify("050000")
storage = FrameStorage(frame_bytes)

= Check only one frame
frames = storage.get_frames()
assert len(frames) == 1

= Check that one stop sending stream frame
stop_sending_frame_frame = frames[0]
assert type(stop_sending_frame_frame) == StopSendingFrame
assert stop_sending_frame_frame.frame_type == 5
assert stop_sending_frame_frame.stream_id == 0
assert stop_sending_frame_frame.application_protocol_error_code == 0

= Check build equal to start bytes
assert stop_sending_frame_frame.build() == frame_bytes


+ Crypto frame, case 1: just zero bytes
= Parse the bytes
frame_bytes = unhexlify("060000")
storage = FrameStorage(frame_bytes)

= Check only one frame
frames = storage.get_frames()
assert len(frames) == 1

= Check that one frame
crypto_frame = frames[0]
assert type(crypto_frame) == CryptoFrame
assert crypto_frame.frame_type == 0x06
assert crypto_frame.offset == 0
assert crypto_frame.length == 0
assert crypto_frame.crypto_data == b""
assert crypto_frame.payload == NoPayload()

= Check build equal to start bytes
assert crypto_frame.build() == frame_bytes


+ Crypto frame, case 2: various bytes
= Parse the bytes
frame_bytes = unhexlify(
    "06"
    + "8fdb9753"
    + "4321"
    + "00" * 0x0321
)
storage = FrameStorage(frame_bytes)

= Check only one frame
frames = storage.get_frames()
assert len(frames) == 1

= Check that one frame
crypto_frame = frames[0]
assert type(crypto_frame) == CryptoFrame
assert crypto_frame.frame_type == 0x06
assert crypto_frame.offset == 0x0fdb9753
assert crypto_frame.length == 0x0321
assert crypto_frame.crypto_data == b"\x00" * 0x0321
assert crypto_frame.payload == NoPayload()

= Check build equal to start bytes
assert crypto_frame.build() == frame_bytes


+ Check NewTokenFrame
= Parse series of bytes for NewTokenFrame
from scapy.layers.quic.packets.frames import NewTokenFrame
frame_bytes = unhexlify("070102")
storage = FrameStorage(frame_bytes)

= Check only one frame
frames = storage.get_frames()
assert len(frames) == 1

= Check that one new token stream frame
new_token_frame = frames[0]
assert type(new_token_frame) == NewTokenFrame
assert new_token_frame.frame_type == 7
assert new_token_frame.token_length == 1
assert new_token_frame.token == bytes([2])

= Check build equal to start bytes
assert new_token_frame.build() == frame_bytes


+ Stream frame, case 1: type 0x08 ___, just zero bytes
= Parse the bytes
from scapy.layers.quic.packets.frames import StreamFrame
frame_bytes = unhexlify("0800")
storage = FrameStorage(frame_bytes)

= Check only one frame
frames = storage.get_frames()
assert len(frames) == 1

= Check that one frame
stream_frame = frames[0]
assert type(stream_frame) == StreamFrame
assert stream_frame.frame_type == 0x08
assert not stream_frame.has_off_bit()
assert not stream_frame.has_len_bit()
assert not stream_frame.has_fin_bit()
assert stream_frame.stream_id == 0
assert stream_frame.offset is None
assert stream_frame.length is None
assert stream_frame.stream_data == b""
assert stream_frame.payload == NoPayload()

= Check build equal to start bytes
assert stream_frame.build() == frame_bytes


+ Stream frame, case 2: type 0x08 ___, various + overflow bytes
= Parse the bytes
size = 206
frame_bytes = unhexlify("0812" + "00" * size)
storage = FrameStorage(frame_bytes)

= Check only one frame
frames = storage.get_frames()
assert len(frames) == 1

= Check that one frame
stream_frame = frames[0]
assert type(stream_frame) == StreamFrame
assert stream_frame.frame_type == 0x08
assert not stream_frame.has_off_bit()
assert not stream_frame.has_len_bit()
assert not stream_frame.has_fin_bit()
assert stream_frame.stream_id == 0x12
assert stream_frame.offset is None
assert stream_frame.length is None
assert stream_frame.stream_data == b"\x00" * size
assert stream_frame.payload == NoPayload()

= Check build equal to start bytes
assert stream_frame.build() == frame_bytes


+ Stream frame, case 3: type 0x09 __F, just zero bytes
= Parse the bytes
frame_bytes = unhexlify("0900")
storage = FrameStorage(frame_bytes)

= Check only one frame
frames = storage.get_frames()
assert len(frames) == 1

= Check that one frame
stream_frame = frames[0]
assert type(stream_frame) == StreamFrame
assert stream_frame.frame_type == 0x09
assert not stream_frame.has_off_bit()
assert not stream_frame.has_len_bit()
assert stream_frame.has_fin_bit()
assert stream_frame.stream_id == 0
assert stream_frame.offset is None
assert stream_frame.length is None
assert stream_frame.stream_data == b""
assert stream_frame.payload == NoPayload()

= Check build equal to start bytes
assert stream_frame.build() == frame_bytes


+ Stream frame, case 4: type 0x09 __F, various + overflow bytes
= Parse the bytes
size = 253
frame_bytes = unhexlify("0934" + "00" * size)
storage = FrameStorage(frame_bytes)

= Check only one frame
frames = storage.get_frames()
assert len(frames) == 1

= Check that one frame
stream_frame = frames[0]
assert type(stream_frame) == StreamFrame
assert stream_frame.frame_type == 0x09
assert not stream_frame.has_off_bit()
assert not stream_frame.has_len_bit()
assert stream_frame.has_fin_bit()
assert stream_frame.stream_id == 0x34
assert stream_frame.offset is None
assert stream_frame.length is None
assert stream_frame.stream_data == b"\x00" * size
assert stream_frame.payload == NoPayload()

= Check build equal to start bytes
assert stream_frame.build() == frame_bytes


+ Stream frame, case 5: type 0x0a _L_, just zero bytes
= Parse the bytes
frame_bytes = unhexlify("0a0000")
storage = FrameStorage(frame_bytes)

= Check only one frame
frames = storage.get_frames()
assert len(frames) == 1

= Check that one frame
stream_frame = frames[0]
assert type(stream_frame) == StreamFrame
assert stream_frame.frame_type == 0x0a
assert not stream_frame.has_off_bit()
assert stream_frame.has_len_bit()
assert not stream_frame.has_fin_bit()
assert stream_frame.stream_id == 0
assert stream_frame.offset is None
assert stream_frame.length == 0
assert stream_frame.stream_data == b""
assert stream_frame.payload == NoPayload()

= Check build equal to start bytes
assert stream_frame.build() == frame_bytes


+ Stream frame, case 6: type 0x0a _L_, various bytes
= Parse the bytes
size = 161
frame_bytes = unhexlify(
    "0a"
    + "4567"
    + "40" + hex(size)[2:]
    + "00" * size
)
storage = FrameStorage(frame_bytes)

= Check only one frame
frames = storage.get_frames()
assert len(frames) == 1

= Check that one frame
stream_frame = frames[0]
assert type(stream_frame) == StreamFrame
assert stream_frame.frame_type == 0x0a
assert not stream_frame.has_off_bit()
assert stream_frame.has_len_bit()
assert not stream_frame.has_fin_bit()
assert stream_frame.stream_id == 0x0567
assert stream_frame.offset is None
assert stream_frame.length == size
assert stream_frame.stream_data == b"\x00" * size
assert stream_frame.payload == NoPayload()

= Check build equal to start bytes
assert stream_frame.build() == frame_bytes


+ Stream frame, case 7: type 0x0b _LF, just zero bytes
= Parse the bytes
frame_bytes = unhexlify("0b0000")
storage = FrameStorage(frame_bytes)

= Check only one frame
frames = storage.get_frames()
assert len(frames) == 1

= Check that one frame
stream_frame = frames[0]
assert type(stream_frame) == StreamFrame
assert stream_frame.frame_type == 0x0b
assert not stream_frame.has_off_bit()
assert stream_frame.has_len_bit()
assert stream_frame.has_fin_bit()
assert stream_frame.stream_id == 0
assert stream_frame.offset is None
assert stream_frame.length == 0
assert stream_frame.stream_data == b""
assert stream_frame.payload == NoPayload()

= Check build equal to start bytes
assert stream_frame.build() == frame_bytes


+ Stream frame, case 8: type 0x0b _LF, various bytes
= Parse the bytes
size = 152
frame_bytes = unhexlify(
    "0b"
    + "489a"
    + "40" + hex(size)[2:]
    + "00" * size
)
storage = FrameStorage(frame_bytes)

= Check only one frame
frames = storage.get_frames()
assert len(frames) == 1

= Check that one frame
stream_frame = frames[0]
assert type(stream_frame) == StreamFrame
assert stream_frame.frame_type == 0x0b
assert not stream_frame.has_off_bit()
assert stream_frame.has_len_bit()
assert stream_frame.has_fin_bit()
assert stream_frame.stream_id == 0x089a
assert stream_frame.offset is None
assert stream_frame.length == size
assert stream_frame.stream_data == b"\x00" * size
assert stream_frame.payload == NoPayload()

= Check build equal to start bytes
assert stream_frame.build() == frame_bytes


+ Stream frame, case 9: type 0x0c O__, just zero bytes
= Parse the bytes
frame_bytes = unhexlify("0c0000")
storage = FrameStorage(frame_bytes)

= Check only one frame
frames = storage.get_frames()
assert len(frames) == 1

= Check that one frame
stream_frame = frames[0]
assert type(stream_frame) == StreamFrame
assert stream_frame.frame_type == 0x0c
assert stream_frame.has_off_bit()
assert not stream_frame.has_len_bit()
assert not stream_frame.has_fin_bit()
assert stream_frame.stream_id == 0
assert stream_frame.offset == 0
assert stream_frame.length is None
assert stream_frame.stream_data == b""
assert stream_frame.payload == NoPayload()

= Check build equal to start bytes
assert stream_frame.build() == frame_bytes


+ Stream frame, case 10: type 0x0c O__, various + overflow bytes
= Parse the bytes
size = 227
frame_bytes = unhexlify(
    "0c12"
    + "23"
    + "00" * size
)
storage = FrameStorage(frame_bytes)

= Check only one frame
frames = storage.get_frames()
assert len(frames) == 1

= Check that one frame
stream_frame = frames[0]
assert type(stream_frame) == StreamFrame
assert stream_frame.frame_type == 0x0c
assert stream_frame.has_off_bit()
assert not stream_frame.has_len_bit()
assert not stream_frame.has_fin_bit()
assert stream_frame.stream_id == 0x12
assert stream_frame.offset == 0x23
assert stream_frame.length is None
assert stream_frame.stream_data == b"\x00" * size
assert stream_frame.payload == NoPayload()

= Check build equal to start bytes
assert stream_frame.build() == frame_bytes


+ Stream frame, case 11: type 0x0d O_F, just zero bytes
= Parse the bytes
frame_bytes = unhexlify("0d0000")
storage = FrameStorage(frame_bytes)

= Check only one frame
frames = storage.get_frames()
assert len(frames) == 1

= Check that one frame
stream_frame = frames[0]
assert type(stream_frame) == StreamFrame
assert stream_frame.frame_type == 0x0d
assert stream_frame.has_off_bit()
assert not stream_frame.has_len_bit()
assert stream_frame.has_fin_bit()
assert stream_frame.stream_id == 0
assert stream_frame.offset == 0
assert stream_frame.length is None
assert stream_frame.stream_data == b""
assert stream_frame.payload == NoPayload()

= Check build equal to start bytes
assert stream_frame.build() == frame_bytes


+ Stream frame, case 12: type 0x0d O_F, various + overflow bytes
= Parse the bytes
size = 230
frame_bytes = unhexlify(
    "0d34"
    + "4bcd"
    + "00" * size
)
storage = FrameStorage(frame_bytes)

= Check only one frame
frames = storage.get_frames()
assert len(frames) == 1

= Check that one frame
stream_frame = frames[0]
assert type(stream_frame) == StreamFrame
assert stream_frame.frame_type == 0x0d
assert stream_frame.has_off_bit()
assert not stream_frame.has_len_bit()
assert stream_frame.has_fin_bit()
assert stream_frame.stream_id == 0x34
assert stream_frame.offset == 0x0bcd
assert stream_frame.length is None
assert stream_frame.stream_data == b"\x00" * size
assert stream_frame.payload == NoPayload()

= Check build equal to start bytes
assert stream_frame.build() == frame_bytes


+ Stream frame, case 13: type 0x0e OL_, just zero bytes
= Parse the bytes
frame_bytes = unhexlify("0e000000")
storage = FrameStorage(frame_bytes)

= Check only one frame
frames = storage.get_frames()
assert len(frames) == 1

= Check that one frame
stream_frame = frames[0]
assert type(stream_frame) == StreamFrame
assert stream_frame.frame_type == 0x0e
assert stream_frame.has_off_bit()
assert stream_frame.has_len_bit()
assert not stream_frame.has_fin_bit()
assert stream_frame.stream_id == 0
assert stream_frame.offset == 0
assert stream_frame.length == 0
assert stream_frame.stream_data == b""
assert stream_frame.payload == NoPayload()

= Check build equal to start bytes
assert stream_frame.build() == frame_bytes


+ Stream frame, case 14: type 0x0e OL_, various bytes
= Parse the bytes
size = 57
frame_bytes = unhexlify(
    "0e"
    + "4567"
    + "82345678"
    + "40" + hex(size)[2:]
    + "00" * size
)
storage = FrameStorage(frame_bytes)

= Check only one frame
frames = storage.get_frames()
assert len(frames) == 1

= Check that one frame
stream_frame = frames[0]
assert type(stream_frame) == StreamFrame
assert stream_frame.frame_type == 0x0e
assert stream_frame.has_off_bit()
assert stream_frame.has_len_bit()
assert not stream_frame.has_fin_bit()
assert stream_frame.stream_id == 0x0567
assert stream_frame.offset == 0x02345678
assert stream_frame.length == size
assert stream_frame.stream_data == b"\x00" * size
assert stream_frame.payload == NoPayload()

= Check build equal to start bytes
assert stream_frame.build() == frame_bytes


+ Stream frame, case 15: type 0x0f OLF, just zero bytes
= Parse the bytes
frame_bytes = unhexlify("0f000000")
storage = FrameStorage(frame_bytes)

= Check only one frame
frames = storage.get_frames()
assert len(frames) == 1

= Check that one frame
stream_frame = frames[0]
assert type(stream_frame) == StreamFrame
assert stream_frame.frame_type == 0x0f
assert stream_frame.has_off_bit()
assert stream_frame.has_len_bit()
assert stream_frame.has_fin_bit()
assert stream_frame.stream_id == 0
assert stream_frame.offset == 0
assert stream_frame.length == 0
assert stream_frame.stream_data == b""
assert stream_frame.payload == NoPayload()

= Check build equal to start bytes
assert stream_frame.build() == frame_bytes


+ Stream frame, case 16: type 0x0f OLF, various bytes
= Parse the bytes
size = 204
frame_bytes = unhexlify(
    "0f"
    + "489a"
    + "c123456789abcdef"
    + "40" + hex(size)[2:]
    + "00" * size
)
storage = FrameStorage(frame_bytes)

= Check only one frame
frames = storage.get_frames()
assert len(frames) == 1

= Check that one frame
stream_frame = frames[0]
assert type(stream_frame) == StreamFrame
assert stream_frame.frame_type == 0x0f
assert stream_frame.has_off_bit()
assert stream_frame.has_len_bit()
assert stream_frame.has_fin_bit()
assert stream_frame.stream_id == 0x089a
assert stream_frame.offset == 0x0123456789abcdef
assert stream_frame.length == size
assert stream_frame.stream_data == b"\x00" * size
assert stream_frame.payload == NoPayload()

= Check build equal to start bytes
assert stream_frame.build() == frame_bytes


+ Check MaxDataFrame
= Parse series of bytes for MaxDataFrame
from scapy.layers.quic.packets.frames import MaxDataFrame
frame_bytes = unhexlify("1002")
storage = FrameStorage(frame_bytes)

= Check only one frame
frames = storage.get_frames()
assert len(frames) == 1

= Check that one max data frame
max_data_frame = frames[0]
assert type(max_data_frame) == MaxDataFrame
assert max_data_frame.frame_type == 0x10
assert max_data_frame.maximum_data == 2

= Check build equal to start bytes
assert max_data_frame.build() == frame_bytes


+ Connection close frame, case 1: type 0x1c, just zero bytes
= Parse the bytes
from scapy.layers.quic.packets.frames import ConnectionCloseFrame
frame_bytes = unhexlify("1c000000")
storage = FrameStorage(frame_bytes)

= Check only one frame
frames = storage.get_frames()
assert len(frames) == 1

= Check that one frame
connection_close_frame = frames[0]
assert type(connection_close_frame) == ConnectionCloseFrame
assert connection_close_frame.frame_type == 0x1c
assert connection_close_frame.error_code == 0
assert connection_close_frame.error_frame_type == 0
assert connection_close_frame.reason_phrase_length == 0
assert connection_close_frame.reason_phrase == b""
assert connection_close_frame.payload == NoPayload()

= Check build equal to start bytes
assert connection_close_frame.build() == frame_bytes


+ Connection close frame, case 2: type 0x1c, various bytes
= Parse the bytes
size = 0x0e
frame_bytes = unhexlify(
    "1c"
    + "4678"
    + "89876543"
    + "0e"
    + "00" * size
)
storage = FrameStorage(frame_bytes)

= Check only one frame
frames = storage.get_frames()
assert len(frames) == 1

= Check that one frame
connection_close_frame = frames[0]
assert type(connection_close_frame) == ConnectionCloseFrame
assert connection_close_frame.frame_type == 0x1c
assert connection_close_frame.error_code == 0x678
assert connection_close_frame.error_frame_type == 0x09876543
assert connection_close_frame.reason_phrase_length == size
assert connection_close_frame.reason_phrase == b"\x00" * size
assert connection_close_frame.payload == NoPayload()

= Check build equal to start bytes
assert connection_close_frame.build() == frame_bytes


+ Connection close frame, case 3: type 0x1d, just zero bytes
= Parse the bytes
frame_bytes = unhexlify("1d0000")
storage = FrameStorage(frame_bytes)

= Check only one frame
frames = storage.get_frames()
assert len(frames) == 1

= Check that one frame
connection_close_frame = frames[0]
assert type(connection_close_frame) == ConnectionCloseFrame
assert connection_close_frame.frame_type == 0x1d
assert connection_close_frame.error_code == 0
assert connection_close_frame.error_frame_type is None
assert connection_close_frame.reason_phrase_length == 0
assert connection_close_frame.reason_phrase == b""
assert connection_close_frame.payload == NoPayload()

= Check build equal to start bytes
assert connection_close_frame.build() == frame_bytes


+ Connection close frame, case 4: type 0x1d, various bytes
= Parse the bytes
size = 0x0b
frame_bytes = unhexlify(
    "1d"
    + "4678"
    + "0b"
    + "00" * size
)
storage = FrameStorage(frame_bytes)

= Check only one frame
frames = storage.get_frames()
assert len(frames) == 1

= Check that one frame
connection_close_frame = frames[0]
assert type(connection_close_frame) == ConnectionCloseFrame
assert connection_close_frame.frame_type == 0x1d
assert connection_close_frame.error_code == 0x678
assert connection_close_frame.error_frame_type is None
assert connection_close_frame.reason_phrase_length == size
assert connection_close_frame.reason_phrase == b"\x00" * size
assert connection_close_frame.payload == NoPayload()

= Check build equal to start bytes
assert connection_close_frame.build() == frame_bytes


+ Handshake done frame, case 1: single byte
= Parse the byte
from scapy.layers.quic.packets.frames import HandshakeDoneFrame
storage = FrameStorage(b"\x1e")

= Check only one frame
frames = storage.get_frames()
assert len(frames) == 1

= Check that one frame
handshake_done_frame = frames[0]
assert type(handshake_done_frame) == HandshakeDoneFrame
assert handshake_done_frame.frame_type == 0x1e
assert handshake_done_frame.payload == NoPayload()

= Check build equal to start byte
assert handshake_done_frame.build() == b"\x1e"
